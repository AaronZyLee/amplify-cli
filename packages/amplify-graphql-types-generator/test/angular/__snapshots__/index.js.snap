// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Angular code generation #generateSource() should generate correct list with custom fragment 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type FriendFragment = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
>;

export type HeroAndFriendsNamesQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
> & {
    friends: Maybe<
      Array<Maybe<{ __typename: \\"Human\\" | \\"Droid\\" } & FriendFragment>>
    >;
  };

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";
export const FriendFragmentDoc = gql\`
  fragment Friend on Character {
    __typename
    name
  }
\`;
export const HeroAndFriendsNamesDocument = gql\`
  query HeroAndFriendsNames($episode: Episode) {
    hero(episode: $episode) {
      __typename
      name
      friends {
        __typename
        ...Friend
      }
    }
  }
  \${FriendFragmentDoc}
\`;

async function HeroAndFriendsNamesApi(
  episode?: Maybe<Episode>
): Promise<HeroAndFriendsNamesQuery> {
  const variables: any = {
    episode
  };
  const response = (await API.graphql(
    graphqlOperation(HeroAndFriendsNamesDocument, variables)
  )) as any;
  return <HeroAndFriendsNamesQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroAndFriendsNames = HeroAndFriendsNamesApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate fragmented query operations 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroFriendsFragment = { __typename: \\"Human\\" | \\"Droid\\" } & {
  friends: Maybe<
    Array<Maybe<{ __typename: \\"Human\\" | \\"Droid\\" } & Pick<Character, \\"name\\">>>
  >;
};

export type HeroAndFriendsNamesQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
> &
  HeroFriendsFragment;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";
export const heroFriendsFragmentDoc = gql\`
  fragment heroFriends on Character {
    __typename
    friends {
      __typename
      name
    }
  }
\`;
export const HeroAndFriendsNamesDocument = gql\`
  query HeroAndFriendsNames {
    hero {
      __typename
      name
      ...heroFriends
    }
  }
  \${heroFriendsFragmentDoc}
\`;

async function HeroAndFriendsNamesApi(): Promise<HeroAndFriendsNamesQuery> {
  const response = (await API.graphql(
    graphqlOperation(HeroAndFriendsNamesDocument)
  )) as any;
  return <HeroAndFriendsNamesQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroAndFriendsNames = HeroAndFriendsNamesApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate mutation operations with complex input types 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type ReviewMovieMutation = { __typename: \\"Review\\" } & Pick<
  Review,
  \\"stars\\" | \\"commentary\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const ReviewMovieDocument = gql\`
  mutation ReviewMovie($episode: Episode, $review: ReviewInput!) {
    createReview(episode: $episode, review: $review) {
      __typename
      stars
      commentary
    }
  }
\`;

async function ReviewMovieApi(
  episode?: Maybe<Episode>,
  review: ReviewInput
): Promise<ReviewMovieMutation> {
  const variables: any = {
    episode,
    review
  };
  const response = (await API.graphql(
    graphqlOperation(ReviewMovieDocument, variables)
  )) as any;
  return <ReviewMovieMutation>response.data.createReview;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  ReviewMovie = ReviewMovieApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate query operations with inline fragments 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroDetailsFragment = { __typename: \\"Human\\" | \\"Droid\\" } & (
  | ({ __typename?: \\"Droid\\" } & Pick<Droid, \\"primaryFunction\\">)
  | ({ __typename?: \\"Human\\" } & Pick<Human, \\"height\\">));

export type HeroAndDetailsQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
> &
  HeroDetailsFragment;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";
export const HeroDetailsFragmentDoc = gql\`
  fragment HeroDetails on Character {
    __typename
    ... on Droid {
      primaryFunction
    }
    ... on Human {
      height
    }
  }
\`;
export const HeroAndDetailsDocument = gql\`
  query HeroAndDetails {
    hero {
      __typename
      name
      ...HeroDetails
    }
  }
  \${HeroDetailsFragmentDoc}
\`;

async function HeroAndDetailsApi(): Promise<HeroAndDetailsQuery> {
  const response = (await API.graphql(
    graphqlOperation(HeroAndDetailsDocument)
  )) as any;
  return <HeroAndDetailsQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroAndDetails = HeroAndDetailsApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate simple nested query operations including input variables 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroAndFriendsNamesQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
> & {
    friends: Maybe<
      Array<Maybe<{ __typename: \\"Human\\" | \\"Droid\\" } & Pick<Character, \\"name\\">>>
    >;
  };

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const HeroAndFriendsNamesDocument = gql\`
  query HeroAndFriendsNames($episode: Episode) {
    hero(episode: $episode) {
      __typename
      name
      friends {
        __typename
        name
      }
    }
  }
\`;

async function HeroAndFriendsNamesApi(
  episode?: Maybe<Episode>
): Promise<HeroAndFriendsNamesQuery> {
  const variables: any = {
    episode
  };
  const response = (await API.graphql(
    graphqlOperation(HeroAndFriendsNamesDocument, variables)
  )) as any;
  return <HeroAndFriendsNamesQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroAndFriendsNames = HeroAndFriendsNamesApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate simple nested with required elements in lists 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type StarshipCoordsQuery = { __typename: \\"Starship\\" } & Pick<
  Starship,
  \\"coordinates\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const StarshipCoordsDocument = gql\`
  query StarshipCoords($id: ID!) {
    starship(id: $id) {
      __typename
      coordinates
    }
  }
\`;

async function StarshipCoordsApi(
  id: Scalars[\\"ID\\"]
): Promise<StarshipCoordsQuery> {
  const variables: any = {
    id
  };
  const response = (await API.graphql(
    graphqlOperation(StarshipCoordsDocument, variables)
  )) as any;
  return <StarshipCoordsQuery>response.data.starship;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  StarshipCoords = StarshipCoordsApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate simple query operations 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroNameQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const HeroNameDocument = gql\`
  query HeroName {
    hero {
      __typename
      name
    }
  }
\`;

async function HeroNameApi(): Promise<HeroNameQuery> {
  const response = (await API.graphql(
    graphqlOperation(HeroNameDocument)
  )) as any;
  return <HeroNameQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroName = HeroNameApi;
}
"
`;

exports[`Angular code generation #generateSource() should generate simple query operations including input variables 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroNameQuery = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const HeroNameDocument = gql\`
  query HeroName($episode: Episode) {
    hero(episode: $episode) {
      __typename
      name
    }
  }
\`;

async function HeroNameApi(episode?: Maybe<Episode>): Promise<HeroNameQuery> {
  const variables: any = {
    episode
  };
  const response = (await API.graphql(
    graphqlOperation(HeroNameDocument, variables)
  )) as any;
  return <HeroNameQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroName = HeroNameApi;
}
"
`;

exports[`Angular code generation #generateSource() should handle comments in enums 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

/** This is a type to test comments */
export type CommentTest = {
  __typename?: \\"CommentTest\\";
  /** This is a single-line comment */
  singleLine?: Maybe<Scalars[\\"String\\"]>;
  /** This is a multi-line
   * comment.
   */
  multiLine?: Maybe<Scalars[\\"String\\"]>;
  enumCommentTest?: Maybe<EnumCommentTestCase>;
};

export type DoubleHump = {
  __typename?: \\"doubleHump\\";
  humpOne?: Maybe<Scalars[\\"String\\"]>;
  humpTwo?: Maybe<Scalars[\\"String\\"]>;
};

export enum EnumCommentTestCase {
  /** This is a single-line comment */
  First = \\"first\\",
  /** This is a multi-line
   * comment.
   */
  Second = \\"second\\"
}

export type ImplA = InterfaceTestCase & {
  __typename?: \\"ImplA\\";
  prop: Scalars[\\"String\\"];
  propA: Scalars[\\"String\\"];
};

export type ImplB = InterfaceTestCase & {
  __typename?: \\"ImplB\\";
  prop: Scalars[\\"String\\"];
  propB?: Maybe<Scalars[\\"Int\\"]>;
};

export type InterfaceTestCase = {
  __typename?: \\"InterfaceTestCase\\";
  prop: Scalars[\\"String\\"];
};

export type OddType = {
  __typename?: \\"OddType\\";
  date?: Maybe<Scalars[\\"Date\\"]>;
  camel?: Maybe<DoubleHump>;
};

export type PartialA = {
  __typename?: \\"PartialA\\";
  prop: Scalars[\\"String\\"];
};

export type PartialB = {
  __typename?: \\"PartialB\\";
  prop: Scalars[\\"String\\"];
};

export type Query = {
  __typename?: \\"Query\\";
  misc?: Maybe<OddType>;
  commentTest?: Maybe<CommentTest>;
  interfaceTest?: Maybe<InterfaceTestCase>;
  unionTest?: Maybe<UnionTestCase>;
  scalarTest: Scalars[\\"Boolean\\"];
};

export type UnionTestCase = PartialA | PartialB;
export type CustomScalarQuery = { __typename: \\"CommentTest\\" } & Pick<
  CommentTest,
  \\"enumCommentTest\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const CustomScalarDocument = gql\`
  query CustomScalar {
    commentTest {
      __typename
      enumCommentTest
    }
  }
\`;

async function CustomScalarApi(): Promise<CustomScalarQuery> {
  const response = (await API.graphql(
    graphqlOperation(CustomScalarDocument)
  )) as any;
  return <CustomScalarQuery>response.data.commentTest;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  CustomScalar = CustomScalarApi;
}
"
`;

exports[`Angular code generation #generateSource() should handle interfaces at root 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

/** This is a type to test comments */
export type CommentTest = {
  __typename?: \\"CommentTest\\";
  /** This is a single-line comment */
  singleLine?: Maybe<Scalars[\\"String\\"]>;
  /** This is a multi-line
   * comment.
   */
  multiLine?: Maybe<Scalars[\\"String\\"]>;
  enumCommentTest?: Maybe<EnumCommentTestCase>;
};

export type DoubleHump = {
  __typename?: \\"doubleHump\\";
  humpOne?: Maybe<Scalars[\\"String\\"]>;
  humpTwo?: Maybe<Scalars[\\"String\\"]>;
};

export enum EnumCommentTestCase {
  /** This is a single-line comment */
  First = \\"first\\",
  /** This is a multi-line
   * comment.
   */
  Second = \\"second\\"
}

export type ImplA = InterfaceTestCase & {
  __typename?: \\"ImplA\\";
  prop: Scalars[\\"String\\"];
  propA: Scalars[\\"String\\"];
};

export type ImplB = InterfaceTestCase & {
  __typename?: \\"ImplB\\";
  prop: Scalars[\\"String\\"];
  propB?: Maybe<Scalars[\\"Int\\"]>;
};

export type InterfaceTestCase = {
  __typename?: \\"InterfaceTestCase\\";
  prop: Scalars[\\"String\\"];
};

export type OddType = {
  __typename?: \\"OddType\\";
  date?: Maybe<Scalars[\\"Date\\"]>;
  camel?: Maybe<DoubleHump>;
};

export type PartialA = {
  __typename?: \\"PartialA\\";
  prop: Scalars[\\"String\\"];
};

export type PartialB = {
  __typename?: \\"PartialB\\";
  prop: Scalars[\\"String\\"];
};

export type Query = {
  __typename?: \\"Query\\";
  misc?: Maybe<OddType>;
  commentTest?: Maybe<CommentTest>;
  interfaceTest?: Maybe<InterfaceTestCase>;
  unionTest?: Maybe<UnionTestCase>;
  scalarTest: Scalars[\\"Boolean\\"];
};

export type UnionTestCase = PartialA | PartialB;
export type CustomScalarQuery = { __typename: \\"ImplA\\" | \\"ImplB\\" } & Pick<
  InterfaceTestCase,
  \\"prop\\"
> &
  (
    | ({ __typename?: \\"ImplA\\" } & Pick<ImplA, \\"propA\\">)
    | ({ __typename?: \\"ImplB\\" } & Pick<ImplB, \\"propB\\">));

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const CustomScalarDocument = gql\`
  query CustomScalar {
    interfaceTest {
      __typename
      prop
      ... on ImplA {
        propA
      }
      ... on ImplB {
        propB
      }
    }
  }
\`;

async function CustomScalarApi(): Promise<CustomScalarQuery> {
  const response = (await API.graphql(
    graphqlOperation(CustomScalarDocument)
  )) as any;
  return <CustomScalarQuery>response.data.interfaceTest;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  CustomScalar = CustomScalarApi;
}
"
`;

exports[`Angular code generation #generateSource() should handle multi-line comments 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

/** This is a type to test comments */
export type CommentTest = {
  __typename?: \\"CommentTest\\";
  /** This is a single-line comment */
  singleLine?: Maybe<Scalars[\\"String\\"]>;
  /** This is a multi-line
   * comment.
   */
  multiLine?: Maybe<Scalars[\\"String\\"]>;
  enumCommentTest?: Maybe<EnumCommentTestCase>;
};

export type DoubleHump = {
  __typename?: \\"doubleHump\\";
  humpOne?: Maybe<Scalars[\\"String\\"]>;
  humpTwo?: Maybe<Scalars[\\"String\\"]>;
};

export enum EnumCommentTestCase {
  /** This is a single-line comment */
  First = \\"first\\",
  /** This is a multi-line
   * comment.
   */
  Second = \\"second\\"
}

export type ImplA = InterfaceTestCase & {
  __typename?: \\"ImplA\\";
  prop: Scalars[\\"String\\"];
  propA: Scalars[\\"String\\"];
};

export type ImplB = InterfaceTestCase & {
  __typename?: \\"ImplB\\";
  prop: Scalars[\\"String\\"];
  propB?: Maybe<Scalars[\\"Int\\"]>;
};

export type InterfaceTestCase = {
  __typename?: \\"InterfaceTestCase\\";
  prop: Scalars[\\"String\\"];
};

export type OddType = {
  __typename?: \\"OddType\\";
  date?: Maybe<Scalars[\\"Date\\"]>;
  camel?: Maybe<DoubleHump>;
};

export type PartialA = {
  __typename?: \\"PartialA\\";
  prop: Scalars[\\"String\\"];
};

export type PartialB = {
  __typename?: \\"PartialB\\";
  prop: Scalars[\\"String\\"];
};

export type Query = {
  __typename?: \\"Query\\";
  misc?: Maybe<OddType>;
  commentTest?: Maybe<CommentTest>;
  interfaceTest?: Maybe<InterfaceTestCase>;
  unionTest?: Maybe<UnionTestCase>;
  scalarTest: Scalars[\\"Boolean\\"];
};

export type UnionTestCase = PartialA | PartialB;
export type CustomScalarQuery = { __typename: \\"CommentTest\\" } & Pick<
  CommentTest,
  \\"multiLine\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const CustomScalarDocument = gql\`
  query CustomScalar {
    commentTest {
      __typename
      multiLine
    }
  }
\`;

async function CustomScalarApi(): Promise<CustomScalarQuery> {
  const response = (await API.graphql(
    graphqlOperation(CustomScalarDocument)
  )) as any;
  return <CustomScalarQuery>response.data.commentTest;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  CustomScalar = CustomScalarApi;
}
"
`;

exports[`Angular code generation #generateSource() should handle single line comments 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

/** This is a type to test comments */
export type CommentTest = {
  __typename?: \\"CommentTest\\";
  /** This is a single-line comment */
  singleLine?: Maybe<Scalars[\\"String\\"]>;
  /** This is a multi-line
   * comment.
   */
  multiLine?: Maybe<Scalars[\\"String\\"]>;
  enumCommentTest?: Maybe<EnumCommentTestCase>;
};

export type DoubleHump = {
  __typename?: \\"doubleHump\\";
  humpOne?: Maybe<Scalars[\\"String\\"]>;
  humpTwo?: Maybe<Scalars[\\"String\\"]>;
};

export enum EnumCommentTestCase {
  /** This is a single-line comment */
  First = \\"first\\",
  /** This is a multi-line
   * comment.
   */
  Second = \\"second\\"
}

export type ImplA = InterfaceTestCase & {
  __typename?: \\"ImplA\\";
  prop: Scalars[\\"String\\"];
  propA: Scalars[\\"String\\"];
};

export type ImplB = InterfaceTestCase & {
  __typename?: \\"ImplB\\";
  prop: Scalars[\\"String\\"];
  propB?: Maybe<Scalars[\\"Int\\"]>;
};

export type InterfaceTestCase = {
  __typename?: \\"InterfaceTestCase\\";
  prop: Scalars[\\"String\\"];
};

export type OddType = {
  __typename?: \\"OddType\\";
  date?: Maybe<Scalars[\\"Date\\"]>;
  camel?: Maybe<DoubleHump>;
};

export type PartialA = {
  __typename?: \\"PartialA\\";
  prop: Scalars[\\"String\\"];
};

export type PartialB = {
  __typename?: \\"PartialB\\";
  prop: Scalars[\\"String\\"];
};

export type Query = {
  __typename?: \\"Query\\";
  misc?: Maybe<OddType>;
  commentTest?: Maybe<CommentTest>;
  interfaceTest?: Maybe<InterfaceTestCase>;
  unionTest?: Maybe<UnionTestCase>;
  scalarTest: Scalars[\\"Boolean\\"];
};

export type UnionTestCase = PartialA | PartialB;
export type CustomScalarQuery = { __typename: \\"CommentTest\\" } & Pick<
  CommentTest,
  \\"singleLine\\"
>;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const CustomScalarDocument = gql\`
  query CustomScalar {
    commentTest {
      __typename
      singleLine
    }
  }
\`;

async function CustomScalarApi(): Promise<CustomScalarQuery> {
  const response = (await API.graphql(
    graphqlOperation(CustomScalarDocument)
  )) as any;
  return <CustomScalarQuery>response.data.commentTest;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  CustomScalar = CustomScalarApi;
}
"
`;

exports[`Angular code generation #generateSource() should handle unions at root 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
};

/** This is a type to test comments */
export type CommentTest = {
  __typename?: \\"CommentTest\\";
  /** This is a single-line comment */
  singleLine?: Maybe<Scalars[\\"String\\"]>;
  /** This is a multi-line
   * comment.
   */
  multiLine?: Maybe<Scalars[\\"String\\"]>;
  enumCommentTest?: Maybe<EnumCommentTestCase>;
};

export type DoubleHump = {
  __typename?: \\"doubleHump\\";
  humpOne?: Maybe<Scalars[\\"String\\"]>;
  humpTwo?: Maybe<Scalars[\\"String\\"]>;
};

export enum EnumCommentTestCase {
  /** This is a single-line comment */
  First = \\"first\\",
  /** This is a multi-line
   * comment.
   */
  Second = \\"second\\"
}

export type ImplA = InterfaceTestCase & {
  __typename?: \\"ImplA\\";
  prop: Scalars[\\"String\\"];
  propA: Scalars[\\"String\\"];
};

export type ImplB = InterfaceTestCase & {
  __typename?: \\"ImplB\\";
  prop: Scalars[\\"String\\"];
  propB?: Maybe<Scalars[\\"Int\\"]>;
};

export type InterfaceTestCase = {
  __typename?: \\"InterfaceTestCase\\";
  prop: Scalars[\\"String\\"];
};

export type OddType = {
  __typename?: \\"OddType\\";
  date?: Maybe<Scalars[\\"Date\\"]>;
  camel?: Maybe<DoubleHump>;
};

export type PartialA = {
  __typename?: \\"PartialA\\";
  prop: Scalars[\\"String\\"];
};

export type PartialB = {
  __typename?: \\"PartialB\\";
  prop: Scalars[\\"String\\"];
};

export type Query = {
  __typename?: \\"Query\\";
  misc?: Maybe<OddType>;
  commentTest?: Maybe<CommentTest>;
  interfaceTest?: Maybe<InterfaceTestCase>;
  unionTest?: Maybe<UnionTestCase>;
  scalarTest: Scalars[\\"Boolean\\"];
};

export type UnionTestCase = PartialA | PartialB;
export type CustomScalarQuery =
  | ({ __typename?: \\"PartialA\\" } & Pick<PartialA, \\"prop\\">)
  | ({ __typename?: \\"PartialB\\" } & Pick<PartialB, \\"prop\\">);

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";

export const CustomScalarDocument = gql\`
  query CustomScalar {
    unionTest {
      __typename
      ... on PartialA {
        prop
      }
      ... on PartialB {
        prop
      }
    }
  }
\`;

async function CustomScalarApi(): Promise<CustomScalarQuery> {
  const response = (await API.graphql(
    graphqlOperation(CustomScalarDocument)
  )) as any;
  return <CustomScalarQuery>response.data.unionTest;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  CustomScalar = CustomScalarApi;
}
"
`;

exports[`Angular code generation #generateSource() should have __typename value matching fragment type on generic type 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type HeroWithNameFragment = { __typename: \\"Human\\" | \\"Droid\\" } & Pick<
  Character,
  \\"name\\"
>;

export type HeroNameQuery = {
  __typename: \\"Human\\" | \\"Droid\\";
} & HeroWithNameFragment;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";
export const HeroWithNameFragmentDoc = gql\`
  fragment HeroWithName on Character {
    __typename
    name
  }
\`;
export const HeroNameDocument = gql\`
  query HeroName {
    hero {
      __typename
      ...HeroWithName
    }
  }
  \${HeroWithNameFragmentDoc}
\`;

async function HeroNameApi(): Promise<HeroNameQuery> {
  const response = (await API.graphql(
    graphqlOperation(HeroNameDocument)
  )) as any;
  return <HeroNameQuery>response.data.hero;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  HeroName = HeroNameApi;
}
"
`;

exports[`Angular code generation #generateSource() should have __typename value matching fragment type on specific type 1`] = `
"/* tslint:disable */
//  This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** A character from the Star Wars universe */
export type Character = {
  __typename?: \\"Character\\";
  /** The ID of the character */
  id: Scalars[\\"ID\\"];
  /** The name of the character */
  name: Scalars[\\"String\\"];
  /** The friends of the character, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the character exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this character appears in */
  appearsIn: Array<Maybe<Episode>>;
};

/** A character from the Star Wars universe */
export type CharacterFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The input object sent when passing in a color */
export type ColorInput = {
  red: Scalars[\\"Int\\"];
  green: Scalars[\\"Int\\"];
  blue: Scalars[\\"Int\\"];
};

/** An autonomous mechanical character in the Star Wars universe */
export type Droid = Character & {
  __typename?: \\"Droid\\";
  /** The ID of the droid */
  id: Scalars[\\"ID\\"];
  /** What others call this droid */
  name: Scalars[\\"String\\"];
  /** This droid's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the droid exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this droid appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** This droid's primary function */
  primaryFunction?: Maybe<Scalars[\\"String\\"]>;
};

/** An autonomous mechanical character in the Star Wars universe */
export type DroidFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** The episodes in the Star Wars trilogy */
export enum Episode {
  /** Star Wars Episode IV: A New Hope, released in 1977. */
  Newhope = \\"NEWHOPE\\",
  /** Star Wars Episode V: The Empire Strikes Back, released in 1980. */
  Empire = \\"EMPIRE\\",
  /** Star Wars Episode VI: Return of the Jedi, released in 1983. */
  Jedi = \\"JEDI\\"
}

/** A connection object for a character's friends */
export type FriendsConnection = {
  __typename?: \\"FriendsConnection\\";
  /** The total number of friends */
  totalCount?: Maybe<Scalars[\\"Int\\"]>;
  /** The edges for each of the character's friends. */
  edges?: Maybe<Array<Maybe<FriendsEdge>>>;
  /** A list of the friends, as a convenience when edges are not needed. */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** Information for paginating this connection */
  pageInfo: PageInfo;
};

/** An edge object for a character's friends */
export type FriendsEdge = {
  __typename?: \\"FriendsEdge\\";
  /** A cursor used for pagination */
  cursor: Scalars[\\"ID\\"];
  /** The character represented by this friendship edge */
  node?: Maybe<Character>;
};

/** A humanoid creature from the Star Wars universe */
export type Human = Character & {
  __typename?: \\"Human\\";
  /** The ID of the human */
  id: Scalars[\\"ID\\"];
  /** What this human calls themselves */
  name: Scalars[\\"String\\"];
  /** The home planet of the human, or null if unknown */
  homePlanet?: Maybe<Scalars[\\"String\\"]>;
  /** Height in the preferred unit, default is meters */
  height?: Maybe<Scalars[\\"Float\\"]>;
  /** Mass in kilograms, or null if unknown */
  mass?: Maybe<Scalars[\\"Float\\"]>;
  /** This human's friends, or an empty list if they have none */
  friends?: Maybe<Array<Maybe<Character>>>;
  /** The friends of the human exposed as a connection with edges */
  friendsConnection: FriendsConnection;
  /** The movies this human appears in */
  appearsIn: Array<Maybe<Episode>>;
  /** A list of starships this person has piloted, or an empty list if none */
  starships?: Maybe<Array<Maybe<Starship>>>;
};

/** A humanoid creature from the Star Wars universe */
export type HumanHeightArgs = {
  unit: LengthUnit;
};

/** A humanoid creature from the Star Wars universe */
export type HumanFriendsConnectionArgs = {
  first?: Maybe<Scalars[\\"Int\\"]>;
  after?: Maybe<Scalars[\\"ID\\"]>;
};

/** Units of height */
export enum LengthUnit {
  /** The standard unit around the world */
  Meter = \\"METER\\",
  /** Primarily used in the United States */
  Foot = \\"FOOT\\"
}

/** The mutation type, represents all updates we can make to our data */
export type Mutation = {
  __typename?: \\"Mutation\\";
  createReview?: Maybe<Review>;
};

/** The mutation type, represents all updates we can make to our data */
export type MutationCreateReviewArgs = {
  episode?: Maybe<Episode>;
  review: ReviewInput;
};

/** Information for paginating this connection */
export type PageInfo = {
  __typename?: \\"PageInfo\\";
  startCursor?: Maybe<Scalars[\\"ID\\"]>;
  endCursor?: Maybe<Scalars[\\"ID\\"]>;
  hasNextPage: Scalars[\\"Boolean\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type Query = {
  __typename?: \\"Query\\";
  hero?: Maybe<Character>;
  reviews?: Maybe<Array<Maybe<Review>>>;
  search?: Maybe<Array<Maybe<SearchResult>>>;
  character?: Maybe<Character>;
  droid?: Maybe<Droid>;
  human?: Maybe<Human>;
  starship?: Maybe<Starship>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHeroArgs = {
  episode?: Maybe<Episode>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryReviewsArgs = {
  episode: Episode;
};

/** The query type, represents all of the entry points into our object graph */
export type QuerySearchArgs = {
  text?: Maybe<Scalars[\\"String\\"]>;
};

/** The query type, represents all of the entry points into our object graph */
export type QueryCharacterArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryDroidArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryHumanArgs = {
  id: Scalars[\\"ID\\"];
};

/** The query type, represents all of the entry points into our object graph */
export type QueryStarshipArgs = {
  id: Scalars[\\"ID\\"];
};

/** Represents a review for a movie */
export type Review = {
  __typename?: \\"Review\\";
  /** The number of stars this review gave, 1-5 */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie */
  commentary?: Maybe<Scalars[\\"String\\"]>;
};

/** The input object sent when someone is creating a new review */
export type ReviewInput = {
  /** 0-5 stars */
  stars: Scalars[\\"Int\\"];
  /** Comment about the movie, optional */
  commentary?: Maybe<Scalars[\\"String\\"]>;
  /** Favorite color, optional */
  favorite_color?: Maybe<ColorInput>;
};

export type SearchResult = Human | Droid | Starship;

export type Starship = {
  __typename?: \\"Starship\\";
  /** The ID of the starship */
  id: Scalars[\\"ID\\"];
  /** The name of the starship */
  name: Scalars[\\"String\\"];
  /** Length of the starship, along the longest axis */
  length?: Maybe<Scalars[\\"Float\\"]>;
  coordinates?: Maybe<Array<Array<Scalars[\\"Float\\"]>>>;
};

export type StarshipLengthArgs = {
  unit: LengthUnit;
};
export type DroidWithNameFragment = { __typename: \\"Droid\\" } & Pick<
  Droid,
  \\"name\\"
>;

export type DroidNameQuery = { __typename: \\"Droid\\" } & DroidWithNameFragment;

import gql from \\"graphql-tag\\";
import { Injectable } from \\"@angular/core\\";
import API, { graphqlOperation } from \\"@aws-amplify/api\\";
import { GraphQLResult } from \\"@aws-amplify/api/lib/types\\";
import * as Observable from \\"zen-observable\\";
export const DroidWithNameFragmentDoc = gql\`
  fragment DroidWithName on Droid {
    __typename
    name
  }
\`;
export const DroidNameDocument = gql\`
  query DroidName($id: ID!) {
    droid(id: $id) {
      __typename
      ...DroidWithName
    }
  }
  \${DroidWithNameFragmentDoc}
\`;

async function DroidNameApi(id: Scalars[\\"ID\\"]): Promise<DroidNameQuery> {
  const variables: any = {
    id
  };
  const response = (await API.graphql(
    graphqlOperation(DroidNameDocument, variables)
  )) as any;
  return <DroidNameQuery>response.data.droid;
}

@Injectable({
  providedIn: \\"root\\"
})
export class APIService {
  DroidName = DroidNameApi;
}
"
`;
